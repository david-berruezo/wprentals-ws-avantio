<?phpclass Avantio{    // avantio    private $avantio_credentials;    private $avantio_files;    private $avantio_credential = "servidor_tiendapisos";    // Files Downloaded    private $files_downloaded      = array();    private $files_downloaded_temp = array();    // report    private $last_insert_id_report = 0;    // post_id    private $post_id = 0;    # Objects Nuevo and KindAlquiler    private $status = "";    private $kindAlquiler = "";    # db wpdb connection    private $db = "";    public function __construct($param = null)    {        //echo "parametro: " . $param;        $this->initialize($param);    } // end function    /**     * @param null $param     */    private function initialize($param = null)    {        # conntect db        $this->connectDb();        # avantio credentials only for language        $this->setAvantioCredentials(null,"production");        # delete | descatalogado        //$this->delete_all();        # createPostsAndTaxonomies | descatalogado        //$this->createPostsAndTaxonomies();        # update or insert information        $this->update();    } // end function    private function connectDb()    {        $connector = new Database();        $connector->setCredential($this->getAvantioCredential());        $this->db = $connector::getInstance();    } // end function    private function update()    {        # acommodation        //$this->updateAccomodation();        # entorno        //$this->updateEntorno();        # picture        //$this->updatePicture();        # description        //$this->updateDescription();        # availabilityRates        //$this->updateAvalabilityRates();   } // end function    private function updateAccomodation()    {        $accomodation = new Accomodation();        $accomodation->setAvantioCredential($this->getAvantioCredential());        $accomodation->connectDb();        $accomodation->insertAccomodations($this->getAvantioCredentials());    } // end function    private function updateEntorno()    {        $entorno = new Entorno();        $entorno->setAvantioCredential($this->getAvantioCredential());        $entorno->connectDb();        $entorno->insertEntorno();    } // end function    private function updatePicture()    {        $picture = new Picture();        $picture->setAvantioCredential($this->getAvantioCredential());        $picture->connectDb();        $picture->insertPictures($this->getAvantioCredentials());    } // end function    private function updateDescription()    {        $description = new Description();        $description->setAvantioCredential($this->getAvantioCredential());        $description->connectDb();        $description->insertDescriptions($this->getAvantioCredentials());    } // end function    private function updateAvalabilityRates()    {        $availabilityRates = new AvailabilityRates();        $availabilityRates->setAvantioCredential($this->getAvantioCredential());        $availabilityRates->connectDb();        $availabilityRates->insertAccomodations($this->getAvantioCredentials());    } // end function    /**     * @return string     */    public function getAvantioCredential(): string    {        return $this->avantio_credential;    }    /**     * @param string $avantio_credential     */    public function setAvantioCredential(string $avantio_credential): void    {        $this->avantio_credential = $avantio_credential;    }    /* ********************************************* descatalogado ***************************************** */    private function createPostsAndTaxonomies()    {        # psot and taxonomies        $postAndTaxonomies = new CreatePostsAndTaxonomies();        $postAndTaxonomies->create_post_type_estate_property();        $postAndTaxonomies->create_taxonomy_property_category();        $postAndTaxonomies->create_taxonomy_property_action_category();        $postAndTaxonomies->create_taxonomy_property_city();        $postAndTaxonomies->create_taxonomy_property_area();        $postAndTaxonomies->create_taxonomy_property_features();        $postAndTaxonomies->create_taxonomy_property_extra_services();        $postAndTaxonomies->create_taxonomy_property_status();        $postAndTaxonomies->create_taxonomy_property_swimming_pool($this->avantio_credentials);        # insert features        // $features = new Feature();        //$features->createFeatures($this->avantio_credentials);    } // end function    private function print_xml_avantio($view_xml,$xml)    {        if ($view_xml)            print_r($xml);    } // end function    private function updateTaxonomies()    {        # create custom post type and taxonomies        $postAndTaxonomies = new CreatePostsAndTaxonomies();        $postAndTaxonomies->create_post_type_estate_property();        $postAndTaxonomies->create_taxonomy_property_category();        $postAndTaxonomies->create_taxonomy_property_action_category();        $postAndTaxonomies->create_taxonomy_property_city();        $postAndTaxonomies->create_taxonomy_property_area();        $postAndTaxonomies->create_taxonomy_property_features();        $postAndTaxonomies->create_taxonomy_property_extra_services();        $postAndTaxonomies->create_taxonomy_property_status();        //$postAndTaxonomies->create_taxonomy_property_swimming_pool($this->avantio_credentials);        //$postAndTaxonomies->insert_taxononomy_property_swimming_pool($this->avantio_credentials);        # insert features        $features = new Feature();        //$features->createFeatures($this->avantio_credentials);    } // end function    /**     * @param $xml     */    private function updateEstateProperty()    {        $estateProperty = new EstateProperty();        $estateProperty->insertEstateProperty($this->getAvantioCredentials());    } // end function    private function updateServices($xml)    {        $service = new Service();        $service->insertServices($xml,$this->getAvantioCredentials());        //$this->write_report_historico("services");    } // end function    private function updateGeographicAreas($xml)    {        $geographicArea = new GeographicArea();        $geographicArea->insertGeographicAreas($xml,$this->getAvantioCredentials());        //$this->write_report_historico("geographicareas");    } // end function    private function updateKinds($xml)    {        $kinds = new Kind();        $kinds->insertKinds($xml,$this->getAvantioCredentials());        //$this->write_report_historico("kinds");    } // end function    private function updateKindsAlquiler()    {        $this->kindsAlquiler = new KindAlquiler();        $this->kindsAlquiler->insertKinds($this->getAvantioCredentials());        //$this->write_report_historico("kinds");    } // end function    private function updateStatus()    {        $this->status = new Status();        $this->status->insertStatus($this->getAvantioCredentials());        //$this->write_report_historico("kinds");    } // end function    private function updateOcupationRules($xml,$ts,$ts_referencia)    {        $ocupationRules = new OcuppationRule();        $ocupationRules->insertOcuppationRules($xml,$this->getAvantioCredentials(),$ts,$ts_referencia);        $this->write_report_historico("occupationalrules");    } // end function    private function updateAvalability($xml,$ts,$ts_referencia)    {        $availability = new AvailabilityRates();        $availability->insertAvailabilities($xml,$this->getAvantioCredentials(),$ts,$ts_referencia);        $this->write_report_historico("availabilities");    } // end function    private function updateRates($xml,$ts,$ts_referencia)    {        $rate = new Rate();        $rate->insertRates($xml,$this->getAvantioCredentials(),$ts,$ts_referencia);        $this->write_report_historico("rates");    } // end function    private function updatePriceModify($xml,$ts,$ts_referencia)    {        $priceModify = new PriceModify();        $priceModify->insertPricesModify($xml,$this->getAvantioCredentials(),$ts,$ts_referencia);        $this->write_report_historico("pricemodifiers");    } // end function    /**     * @param $tipo_report     */    private function write_report($tipo_report)    {        $db = \Config\Database::connect('tests');        $id = null;        $fecha = date('Y-m-d H:i:s');        $sql="INSERT INTO avantio_report (id,parametro_report,fecha) VALUES ('".$id."' , '".$db->escapeString($tipo_report)."' ,'" . $fecha . "' ) ;";        if (!$db->query($sql)){            $error = $db->error();            echo "Error " . $error["code"] . " con la descripciÃ³n " . $error["message"];            die();        }// end if        $this->setLastInsertIdReport($db->insertID());    } // end function    /**     * @param $fichero_key     */    private function write_report_historico($fichero_key)    {        $ficheros = array(            "geographicareas"   => "geographicareas.xml",            "services"          => "services.xml",            "kinds"             => "kinds.xml",            "accommodations"    => "accommodations.xml",            "descriptions"      => "descriptions.xml",            "availabilities"    => "availabilities.xml",            "rates"             => "rates.xml",            "occupationalrules" => "occupationalrules.xml",            "pricemodifiers"    => "pricemodifiers.xml"        );        $db = \Config\Database::connect('tests');        $id = null;        $fichero = $ficheros[$fichero_key];        $id_avantio_report = $this->getLastInsertIdReport();        $sql="INSERT INTO avantio_report_historico (id,id_avantio_report,fichero) VALUES ('".$id."' , '" . $id_avantio_report . "', '".$db->escapeString($fichero)."'  ) ;";        if (!$db->query($sql)){            $error = $db->error();            echo "Error " . $error["code"] . " con la descripciÃ³n " . $error["message"];            die();        }// end if    } // end function    /**     * @return array     */    public function getFilesDownloadedTemp()    {        return $this->files_downloaded_temp;    }    /**     * @param array $files_downloaded_temp     */    public function setFilesDownloadedTemp($files_downloaded_temp , $system)    {        if (!$files_downloaded_temp){            if ($system == "linux"){            }else if($system == "windows"){                $this->files_downloaded = array(                    "static" => Array(                        "geographicareas" => "C:\htdocs\avantio_cron_cli\app\Controllers/../xmldata/geographicareas.20210730115107.xml",                        "services"        => "C:\htdocs\avantio_cron_cli\app\Controllers/../xmldata/services.20210730115108.xml",                        "kinds"           => "C:\htdocs\avantio_cron_cli\app\Controllers/../xmldata/kinds.20210730115108.xml"                    ),                    "dynamic" => array(                        "accommodations" => "C:\htdocs\avantio_cron_cli\app\Controllers/../xmldata/accommodations.20210730115108.xml",                        //"descriptions"   => "C:\htdocs\avantio_cron_cli\app\Controllers/../xmldata/descriptions.20210711122105.xml",                        "descriptions"   => "C:\htdocs\avantio_cron_cli\app\Controllers/../xmldata/descriptions.20210711205936.xml"                    ),                    "prices" => array(                        "availabilities"    => "C:\htdocs\avantio_cron_cli\app\Controllers/../xmldata/availabilities.20210730115109.xml",                        "rates"             => "C:\htdocs\avantio_cron_cli\app\Controllers/../xmldata/rates.20210730115109.xml",                        "occupationalrules" => "C:\htdocs\avantio_cron_cli\app\Controllers/../xmldata/occupationalrules.20210730115109.xml",                        "pricemodifiers"    => "C:\htdocs\avantio_cron_cli\app\Controllers/../xmldata/pricemodifiers.20210730115109.xml",                    )                );            }// end if        }// end if        $this->files_downloaded_temp = $files_downloaded_temp;    }// end function    /**     * @return mixed     */    public function getAvantioCredentials()    {        return $this->avantio_credentials;    }    /**     * @param mixed $avantio_credentials     */    public function setAvantioCredentials($avantio_credentials = null, $mode)    {        # active languanges        $language = new Language();        $language->setDb($this->db);        # data        if(empty($avantio_credentials))            if($mode == "test"){                $avantio_credentials = array(                    'PARTNER_CODE'		        => '836efa4efbe7fa63f2ebbae30d7b965f',                    'WEBSERVICE_USER' 	        => 'itsatentoapi_test',                    'WEBSERVICE_PWD'	        => 'testapixml',                    'URL_FEEDS'                 => 'http://feeds.itsolutions.es/',                    'DELETE_TIME'               => 2*60*60, //2h                    'ACTIVED_LANGUAGES'         => $language->getAll(),                    'INSERT_COUNT'              => 1000,                    'INSERT_COUNT_IMAGES'       => 25,                    'MAP_DAYS'                  => array ('MONDAY'=>1,'TUESDAY'=>2,'WEDNESDAY'=>3,'THURSDAY'=>4,'FRIDAY'=>5,'SATURDAY'=>6,'SUNDAY'=>7),                );            }else if ($mode == "production"){                $avantio_credentials = array(                    'PARTNER_CODE'		        => 'b552a46e9ec985203668eebe7ab7879b',                    'WEBSERVICE_USER' 	        => 'home_sweet_home',                    'WEBSERVICE_PWD'	        => 'pWZP6HGYgCWxg6vF',                    'URL_FEEDS'                 => 'http://feeds.itsolutions.es/',                    'DELETE_TIME'               => 2*60*60, //2h                    'ACTIVED_LANGUAGES'         => $language->getAll(),                    'INSERT_COUNT'              => 1000,                    'INSERT_COUNT_IMAGES'       => 25,                    'MAP_DAYS'                  => array ('MONDAY'=>1,'TUESDAY'=>2,'WEDNESDAY'=>3,'THURSDAY'=>4,'FRIDAY'=>5,'SATURDAY'=>6,'SUNDAY'=>7),                );            }// end if        $this->avantio_credentials = $avantio_credentials;    }    /**     * @return mixed     */    public function getAvantioFiles()    {        return $this->avantio_files;    }    /**     * @param mixed $avantio_files     */    public function setAvantioFiles($avantio_files = null)    {        if(empty($avantio_files))            $avantio_files = array(                'static'=>array(                    'geographicareas' => array('update'=>0),                    'services' => array('update'=>0),                    'kinds' => array('update'=>0),                ),                'dynamic'=>array(                    'accommodations' => array('update'=>1),                    'descriptions' 	=> array('update'=>1),                ),                'prices'=>array(                    'availabilities' => array('update'=>1),                    'rates' => array('update'=>1),                    'occupationalrules' => array('update'=>1),                    'pricemodifiers' => array('update'=>1),                )            );        if(empty($avantio_files))            $avantio_files = array(                'static'=>array(                    'geographicareas' => array('update'=>1),                    'services' => array('update'=>1),                    'kinds' => array('update'=>1),                ),                'dynamic'=>array(                    'accommodations' => array('update'=>1),                    'descriptions' 	=> array('update'=>1),                ),                'prices'=>array(                    'availabilities' => array('update'=>1),                    'rates' => array('update'=>1),                    'occupationalrules' => array('update'=>1),                    'pricemodifiers' => array('update'=>1),                )            );        $this->avantio_files = $avantio_files;    } // end function    /**     * @return int     */    public function getLastInsertIdReport()    {        return $this->last_insert_id_report;    }    /**     * @param int $last_insert_id_report     */    public function setLastInsertIdReport($last_insert_id_report)    {        $this->last_insert_id_report = $last_insert_id_report;    }    /**     * @return string     */    public function getStatus()    {        return $this->status;    }    /**     * @param string $status     */    public function setStatus($status)    {        $this->status = $status;    }    /**     * @return string     */    public function getKindAlquiler()    {        return $this->kindAlquiler;    }    /**     * @param string $kindAlquiler     */    public function setKindAlquiler($kindAlquiler)    {        $this->kindAlquiler = $kindAlquiler;    }}